use bankingdb2;

show tables;

insert into customer(first_name,last_name,dob) values 
('harry','potter','2002-03-21'),
('ronald','weasley','2001-02-10'),
('hermione','granger','2002-11-15');

select * from customer;

insert into account(account_type,balance,customer_id) values 
('savings',50000,1) ,
('current',120000,2) ,
('zero_balance',100000,3),
('current',150000,1) ,
('savings',30000,3);

select * from account;


insert into transaction(transaction_type,amount,transaction_date,account_id) 
values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);

select * from transaction;

-- 1. Write a SQL query to retrieve the name, account type and email of all customers. 
select c.id,
	   c.first_name,
	   c.last_name,
       a.account_type 
from 
customer c 
	JOIN account a ON c.id=a.customer_id;
    


-- 2. Write a SQL query to list all transaction corresponding customer.
select	c.first_name,
		c.last_name,
		t.transaction_type,
        t.amount,
        t.transaction_date 
from
	customer c 
	JOIN account a ON c.id=a.customer_id
	JOIN transaction t ON a.id=t.account_id
group by 
c.first_name;

-- 3. Write a SQL query to increase the balance of a specific account by a certain amount.


-- 4). Write a SQL query to Combine first and last names of customers as a full_name.
select CONCAT(first_name , last_name) as full_name
from customer;

-- 5. Write a SQL query to remove accounts with a balance of zero where the account type is savings
delete from account
where balance=0 and account_type='savings';

-- 6. Write a SQL query to Find customers living in a specific city.

-- 7. Write a SQL query to Get the account balance for a specific account.
select account_type,balance from account
where account_type='savings';

-- 8. Write a SQL query to List all current accounts with a balance greater than $1,000.
select * from account
where account_type ='current' and balance > 1000;

-- 9) Write a SQL query to Retrieve all transactions for a specific account.
select * from transaction
where amount=5000;

-- 10). Write a SQL query to Calculate the interest accrued on savings accounts based on a given interest rate.

-- 11). Write a SQL query to Identify accounts where the balance is less than a specified overdraft limit.
-- 12). Write a SQL query to Find customers not living in a specific city.

-- Task 3

-- 1. Write a SQL query to Find the average account balance for all customers. 
select c.first_name,AVG(balance) 
from customer c 
 JOIN account a ON c.id=a.customer_id
Group by 
c.first_name;

-- 2. Write a SQL query to Retrieve the top 10 highest account balances.
select * from account
order by balance desc
limit 10;

-- 3)Write a SQL query to Calculate Total Deposits for All Customers in specific date.


-- 4)Write a SQL query to Find the Oldest and Newest Customers.

-- 5. Write a SQL query to Retrieve transaction details along with the account type.
select a.account_type,t.transaction_type,t.amount,t.transaction_date
from account a JOIN transaction t ON a.id=t.account_id;

-- 6)Write a SQL query to Get a list of customers along with their account details.
select c.first_name,c.last_name,a.account_type,a.balance
 from customer c JOIN account a ON c.id=a.customer_id;
 
 -- 8) Write a SQL query to Identify customers who have more than one account.
 select c.first_name,count(a.id) as num_of_accounts
 from customer c JOIN account a ON c.id=a.customer_id
 Group by c.first_name
 having count(a.id)>1; 
 
-- 11. Calculate the total balance for each account type.
select account_type,sum(balance) as total_balance
from account
group by account_type;

-- 12)Identify accounts with the highest number of transactions order by descending order.
select a.account_type,balance,count(t.id) as no_of_transactions
from account a JOIN transaction t ON a.id=t.account_id
order by no_of_transactions DESC; 

-- Task 4
-- 1)Retrieve the customer(s) with the highest account balance.
select c.first_name,sum(a.balance) maximum_account_balance 
from customer c JOIN account a ON c.id=a.customer_id
group by c.first_name
limit 1; 

-- 2. Calculate the average account balance for customers who have more than one account.

select c.first_name,AVG(a.balance) as average_balance
from customer c JOIN account a ON c.id=a.customer_id
group by c.id
Having count(a.id)>1;

-- 3. Retrieve accounts with transactions whose amounts exceed the average transaction amount.
select a.account_type,t.amount 
from account a JOIN transaction t ON a.id=t.account_id
where t.amount>(select AVG(amount) as average_transaction_amount
				from transaction);
                
-- 4. Identify customers who have no recorded transactions.
select * 
from customer c
where c.id IN(select customer_id
			  from account a
              Where a.id IN(select account_id
							from transaction t
							group by c.first_name
							Having count(t.id)=0));
                            
-- 5. Calculate the total balance of accounts with no recorded transactions.
select a.account_type,sum(balance) as total_balance 
from account a JOIN transaction t ON a.id=t.account_Id
group by a.account_type
Having count(t.id)=0;

-- 6. Retrieve transactions for accounts with the lowest balance.
select t.transaction_type,t.amount,t.transaction_date,a.balance 
from account a 
JOIN transaction t ON a.id=t.account_id
order by a.balance
limit 1;

-- 7)Identify customers who have accounts of multiple types.
select * 
from customer c JOIN account a ON c.id=a.customer_id
group by c.first_name
Having count(distinct a.account_type)>1;

-- 8. Calculate the percentage of each account type out of the total number of accounts.

-- 9. Retrieve all transactions for a customer with a given customer_id.
select t.transaction_type,t.amount,t.transaction_date 
from customer c 
				JOIN account a ON c.id=a.customer_id
                JOIN transaction t ON a.id=t.account_id
                where c.id=1;
                
-- 10. Calculate the total balance for each account type, including a subquery within the SELECT clause.
select account_type,sum(balance) as total_balance 
from account
group by account_type;


select transaction_type,count(*) as 'Num_transaction_Type'
from transaction t
group by transaction_type;
 
select amount,count(*) as 'Num_amount'
from transaction t
group by amount;
 
select *
from transaction 
where transaction_type IN (select transaction_type  from transaction t group by transaction_type having count(*)>1) 
AND amount IN (select amount from transaction t group by amount having count(*)>1);
 
select transaction_type  from transaction t group by transaction_type having count(*)>1;
-- [deposit]
-- [20000]
 
-- PL/SQL cursors : if, for  
 
 
select c.first_name, SUM(a.balance) as 'account_aggregate_balance'
from account a JOIN customer c ON a.customer_id = c.id
group by c.first_name
having account_aggregate_balance > 100000;
 
select t.transaction_date,AVG(a.balance)
from account a JOIN transaction t ON t.account_id = a.id 
group by t.transaction_date;
