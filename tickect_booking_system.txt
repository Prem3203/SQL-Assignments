use ticketbookingsystemdb;


show tables;

describe event;


insert into venue(venue_name,address) values
('mumbai', 'marol andheri(w)'),
('chennai', 'IT Park'),
('pondicherry ', 'state beach');

select * from venue;

insert into venue(venue_name,address) values
('chennai', 'chepauk stadium'),
('bengaluru ', 'm. chinnaswamy stadium');

select * from venue;


-- drop table venue;

insert into customer(customer_name,email,phone_number)
values
('harry potter','harry@gmail.com','45454545'),
('ronald weasley','ron@gmail.com','45454545'),
('hermione granger','her@gmail.com','45454545'),
('draco malfoy','drac@gmail.com','45454545'),
('ginni weasley','ginni@gmail.com', '45454545');

select * from customer;

insert into 
event(event_name,event_date,event_time,total_seats,available_seats,ticket_price,event_type,venue_id)
values
('Late Ms. Lata Mangeshkar Musical','2021-09-12','20:00',320,270,600,'concert',3),
('CSK vs RCB','2024-04-11','19:30',23000,3,3600,'sports',2),
('CSK vs RR','2024-04-19','19:30',23000,10,3400,'sports',2),
('MI vs KKR','2024-05-01','15:30',28000,100,8000,'sports',1);

select * from event;

insert into booking (event_id,customer_id,num_tickets,total_cost,booking_date)
values
(1,1,2,640,'2021-09-12'),
(1,4,3,960,'2021-09-12'),
(2,1,3,10800,'2024-04-11'),
(2,3,5,18000,'2024-04-10'),
(3,5,10,34000,'2024-04-15'),
(4,2,4,32000,'2024-05-01');

select*from booking;



insert into 
event(event_name,event_date,event_time,total_seats,available_seats,ticket_price,event_type,venue_id)
values
('vijai antony live-in concert','2024-05-12','18:00',420,170,1000,'concert',2),
('world cup inaguration','2025-07-12','19:30',23000,300,2400,'sports',4),
('india vs england world cup','2027-07-19','19:30',19000,500,3000,'sports',5),
('RR vs RCB','2024-05-19','15:30',20000,100,2000,'sports',5),
('comic con','2024-06-01','19:00',1000,200,1700,'comic',1);

select * from event;

insert into booking (event_id,customer_id,num_tickets,total_cost,booking_date)
values
(5,1,2,640,'2021-09-12'),
(6,4,3,960,'2021-09-12');

select*from booking;

-- Write a SQL query to select events with available tickets.
select event_name,event_date,event_time,available_seats,ticket_price 
from event
where available_seats > 0;
-- +----------------------------------+------------+------------+-----------------+--------------+
-- | event_name                       | event_date | event_time | available_seats | ticket_price |
-- +----------------------------------+------------+------------+-----------------+--------------+
-- | Late Ms. Lata Mangeshkar Musical | 2021-09-12 | 20:00      |             270 |          600 |
-- | CSK vs RCB                       | 2024-04-11 | 19:30      |               3 |         3600 |
-- | CSK vs RR                        | 2024-04-19 | 19:30      |              10 |         3400 |
-- | MI vs KKR                        | 2024-05-01 | 15:30      |             100 |         8000 |
-- | vijai antony live-in concert     | 2024-05-12 | 18:00      |             170 |         1000 |
-- | world cup inaguration            | 2025-07-12 | 19:30      |             300 |         2400 |
-- | india vs england world cup       | 2027-07-19 | 19:30      |             500 |         3000 |
-- | RR vs RCB                        | 2024-05-19 | 15:30      |             100 |         2000 |
-- | comic con                        | 2024-06-01 | 19:00      |             200 |         1700 |
-- +----------------------------------+------------+------------+-----------------+--------------+


-- -- Write a SQL query to select events name partial match with 'cup'. 
select event_name,event_date,event_time,available_seats,ticket_price
from event
where event_name LIKE '%cup%';
-- +----------------------------+------------+------------+-----------------+--------------+
-- | event_name                 | event_date | event_time | available_seats | ticket_price |
-- +----------------------------+------------+------------+-----------------+--------------+
-- | world cup inaguration      | 2025-07-12 | 19:30      |             300 |         2400 |
-- | india vs england world cup | 2027-07-19 | 19:30      |             500 |         3000 |
-- +----------------------------+------------+------------+-----------------+--------------+


-- Write a SQL query to select events With ticket price range is between 1000 to 2500.
select event_name,event_date,ticket_price
from event
where ticket_price between 1000 and 2500;
-- +------------------------------+------------+--------------+
-- | event_name                   | event_date | ticket_price |
-- +------------------------------+------------+--------------+
-- | vijai antony live-in concert | 2024-05-12 |         1000 |
-- | world cup inaguration        | 2025-07-12 |         2400 |
-- | RR vs RCB                    | 2024-05-19 |         2000 |
-- | comic con                    | 2024-06-01 |         1700 |
-- +------------------------------+------------+--------------+


-- Write a SQL query to retrieve events with dates falling within a specific range.
select * from 
event
where event_date between '2024-04-10' and '2024-07-12';
-- +----+------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- | id | event_name                   | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
-- +----+------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- |  2 | CSK vs RCB                   | 2024-04-11 | 19:30      |       23000 |               3 |         3600 | sports     |        2 |
-- |  3 | CSK vs RR                    | 2024-04-19 | 19:30      |       23000 |              10 |         3400 | sports     |        2 |
-- |  4 | MI vs KKR                    | 2024-05-01 | 15:30      |       28000 |             100 |         8000 | sports     |        1 |
-- |  5 | vijai antony live-in concert | 2024-05-12 | 18:00      |         420 |             170 |         1000 | concert    |        2 |
-- |  8 | RR vs RCB                    | 2024-05-19 | 15:30      |       20000 |             100 |         2000 | sports     |        5 |
-- |  9 | comic con                    | 2024-06-01 | 19:00      |        1000 |             200 |         1700 | comic      |        1 |
-- +----+------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+


-- Write a SQL query to retrieve events with available tickets that also have "Concert" in their name.
select * from 
event
where available_seats > 0 and event_type = 'concert';
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- | id | event_name                       | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- |  1 | Late Ms. Lata Mangeshkar Musical | 2021-09-12 | 20:00      |         320 |             270 |          600 | concert    |        3 |
-- |  5 | vijai antony live-in concert     | 2024-05-12 | 18:00      |         420 |             170 |         1000 | concert    |        2 |
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+


-- Write a SQL query to retrieve users in batches Of 2, Starting from the 4th user.
select * from
customer
order by
id limit 3 offset 3;
-- +----+---------------+-----------------+--------------+
-- | id | customer_name | email           | phone_number |
-- +----+---------------+-----------------+--------------+
-- |  4 | draco malfoy  | drac@gmail.com  | 45454545     |
-- |  5 | ginni weasley | ginni@gmail.com | 45454545     |
-- +----+---------------+-----------------+--------------+


-- Write a SQL query to retrieve bookings details contains booked no of ticket more than 4.
select b.*,c.customer_name,c.email,c.phone_number
from booking b,customer c
where b.customer_id  = c.id AND b.num_tickets>4;
-- +----+----------+-------------+-------------+------------+--------------+------------------+-----------------+--------------+
-- | id | event_id | customer_id | num_tickets | total_cost | booking_date | customer_name    | email           | phone_number |
-- +----+----------+-------------+-------------+------------+--------------+------------------+-----------------+--------------+
-- |  4 |        2 |           3 |           5 |      18000 | 2024-04-10   | hermione granger | her@gmail.com   | 45454545     |
-- |  5 |        3 |           5 |          10 |      34000 | 2024-04-15   | ginni weasley    | ginni@gmail.com | 45454545     |
-- +----+----------+-------------+-------------+------------+--------------+------------------+-----------------+--------------+


-- Write a SQL query to retrieve customer information whose phone number end with '545'
select * from
customer
where phone_number LIKE '%545';
-- +----+------------------+-----------------+--------------+
-- | id | customer_name    | email           | phone_number |
-- +----+------------------+-----------------+--------------+
-- |  1 | harry potter     | harry@gmail.com | 45454545     |
-- |  2 | ronald weasley   | ron@gmail.com   | 45454545     |
-- |  3 | hermione granger | her@gmail.com   | 45454545     |
-- |  4 | draco malfoy     | drac@gmail.com  | 45454545     |
-- |  5 | ginni weasley    | ginni@gmail.com | 45454545     |
-- +----+------------------+-----------------+--------------+


-- Write a SQL query to retrieve the events in order whose seat capacity more than 15000.
select * from
event
where total_seats > 15000
order by
total_seats asc;
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- | id | event_name                 | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- |  7 | india vs england world cup | 2027-07-19 | 19:30      |       19000 |             500 |         3000 | sports     |        5 |
-- |  8 | RR vs RCB                  | 2024-05-19 | 15:30      |       20000 |             100 |         2000 | sports     |        5 |
-- |  2 | CSK vs RCB                 | 2024-04-11 | 19:30      |       23000 |               3 |         3600 | sports     |        2 |
-- |  3 | CSK vs RR                  | 2024-04-19 | 19:30      |       23000 |              10 |         3400 | sports     |        2 |
-- |  6 | world cup inaguration      | 2025-07-12 | 19:30      |       23000 |             300 |         2400 | sports     |        4 |
-- |  4 | MI vs KKR                  | 2024-05-01 | 15:30      |       28000 |             100 |         8000 | sports     |        1 |
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+



-- Write a SQL query to select events name not start with 'a','b','c'
select * from
event
where NOT
(event_name LIKE 'a%' OR
event_name LIKE 'b%' OR
event_name LIKE 'c%');
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- | id | event_name                       | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- |  1 | Late Ms. Lata Mangeshkar Musical | 2021-09-12 | 20:00      |         320 |             270 |          600 | concert    |        3 |
-- |  4 | MI vs KKR                        | 2024-05-01 | 15:30      |       28000 |             100 |         8000 | sports     |        1 |
-- |  5 | vijai antony live-in concert     | 2024-05-12 | 18:00      |         420 |             170 |         1000 | concert    |        2 |
-- |  6 | world cup inaguration            | 2025-07-12 | 19:30      |       23000 |             300 |         2400 | sports     |        4 |
-- |  7 | india vs england world cup       | 2027-07-19 | 19:30      |       19000 |             500 |         3000 | sports     |        5 |
-- |  8 | RR vs RCB                        | 2024-05-19 | 15:30      |       20000 |             100 |         2000 | sports     |        5 |
-- +----+----------------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+


-- Write a SQL query to List Events and Their Average Ticket Prices.
select
e.event_name,
AVG(e.ticket_price) AS avg_ticket_price
from event e,booking b
where 
e.id = b.event_id
group by
e.event_name;
-- +----------------------------------+------------------+
-- | event_name                       | avg_ticket_price |
-- +----------------------------------+------------------+
-- | CSK vs RCB                       |             3600 |
-- | CSK vs RR                        |             3400 |
-- | Late Ms. Lata Mangeshkar Musical |              600 |
-- | MI vs KKR                        |             8000 |
-- | vijai antony live-in concert     |             1000 |
-- | world cup inaguration            |             2400 |
-- +----------------------------------+------------------+


-- Write a SQL query to Calculate the Total Revenue Generated by Events.
select
SUM(total_cost) AS total_revenue
from booking;
-- +---------------+
-- | total_revenue |
-- +---------------+
-- |         98000 |
-- +---------------+


-- Write a SQL query to find the event with the highest ticket sales.
select
e.event_name,
max(b.total_cost) AS highest_ticket_sales
from event e,booking b
where
e.id = b.event_id
group by
e.event_name;
-- +----------------------------------+----------------------+
-- | event_name                       | highest_ticket_sales |
-- +----------------------------------+----------------------+
-- | CSK vs RCB                       |                18000 |
-- | CSK vs RR                        |                34000 |
-- | Late Ms. Lata Mangeshkar Musical |                  960 |
-- | MI vs KKR                        |                32000 |
-- | vijai antony live-in concert     |                  640 |
-- | world cup inaguration            |                  960 |
-- +----------------------------------+----------------------+


-- Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
select event_name,
	(total_seats-available_seats) AS number_of_tickets_sold 
    from event
group by event_name
order by number_of_tickets_sold;
-- +----------------------------------+------------------------+
-- | event_name                       | number_of_tickets_sold |
-- +----------------------------------+------------------------+
-- | Late Ms. Lata Mangeshkar Musical |                     50 |
-- | vijai antony live-in concert     |                    250 |
-- | comic con                        |                    800 |
-- | india vs england world cup       |                  18500 |
-- | RR vs RCB                        |                  19900 |
-- | world cup inaguration            |                  22700 |
-- | CSK vs RR                        |                  22990 |
-- | CSK vs RCB                       |                  22997 |
-- | MI vs KKR                        |                  27900 |
-- +----------------------------------+------------------------+


-- Write a SQL query to Find Events with NO Ticket sales.
select event_id
from booking
where num_tickets < 0;



-- Write a SQL query to Find the user Who Has Booked the Most Tickets
SELECT 
c.customer_name,
b.customer_id,
SUM(b.num_tickets) AS total_tickets_booked
FROM 
booking b, customer c
WHERE 
b.customer_id = c.id
GROUP BY 
b.customer_id, c.customer_name
ORDER BY 
total_tickets_booked DESC LIMIT 1;
-- +---------------+-------------+----------------------+
-- | customer_name | customer_id | total_tickets_booked |
-- +---------------+-------------+----------------------+
-- | ginni weasley |           5 |                   10 |
-- +---------------+-------------+----------------------+


-- Write a SQL query to calculate the average Ticket Price for Events in Each Venue.
select v.venue_name, 
	   AVG(e.ticket_price) AS average_ticket_price
from
	event e
JOIN 
	venue v ON e.id = v.id
group by
	v.venue_name;
-- +--------------+----------------------+
-- | venue_name   | average_ticket_price |
-- +--------------+----------------------+
-- | bengaluru    |                 1000 |
-- | chennai      |     4866.66666666667 |
-- | mumbai       |                 1500 |
-- | pondicherry  |                 2700 |
-- +--------------+----------------------+


-- write a query to display num of tickets sold for each event type
select e.event_type,sum(num_tickets) total_tickets_sold 
from event e
JOIN
	booking b ON e.id = b.event_id
group by
	e.event_type;
-- +------------+--------------------+
-- | event_type | total_tickets_sold |
-- +------------+--------------------+
-- | concert    |                  7 |
-- | sports     |                 25 |
-- +------------+--------------------+

    
-- Write a SQL query to calculate the total Revenue Generated by Events in Each Year.
-- select
-- year(booking_date) AS event_year,
-- SUM(total_cost) AS total_revenue
-- from
-- 	booking
-- group by
-- 	event_year;
    
    
-- Write a SQL query to list users who have booked tickets for multiple events.
select
	c.customer_name,
    c.email,
    c.phone_number,
    count(distinct b.event_id) AS num_events_booked
from
	customer c
JOIN
	booking b ON c.id = b.customer_id
group by
	c.customer_name
HAVING
	count(distinct b.event_id) > 1;
  --   +---------------+-----------------+--------------+-------------------+
-- | customer_name | email           | phone_number | num_events_booked |
-- +---------------+-----------------+--------------+-------------------+
-- | draco malfoy  | drac@gmail.com  | 45454545     |                 2 |
-- | harry potter  | harry@gmail.com | 45454545     |                 3 |
-- +---------------+-----------------+--------------+-------------------+


-- Write a SQL query to calculate the Total Revenue Generated by Events for Each user.
select
	c.customer_name,
    c.email,
    c.phone_number,
    SUM(b.total_cost) AS Total_revenue_from_each_user
from
	customer c
JOIN
	booking b ON c.id = b.customer_id
group by
	c.customer_name;
-- +------------------+-----------------+--------------+------------------------------+
-- | customer_name    | email           | phone_number | Total_revenue_from_each_user |
-- +------------------+-----------------+--------------+------------------------------+
-- | draco malfoy     | drac@gmail.com  | 45454545     |                         1920 |
-- | ginni weasley    | ginni@gmail.com | 45454545     |                        34000 |
-- | harry potter     | harry@gmail.com | 45454545     |                        12080 |
-- | hermione granger | her@gmail.com   | 45454545     |                        18000 |
-- | ronald weasley   | ron@gmail.com   | 45454545     |                        32000 |
-- +------------------+-----------------+--------------+------------------------------+


-- Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue.
select v.venue_name,e.event_type,
	AVG(ticket_price) as avg_ticket_price 
    from venue v JOIN event e ON v.id=e.venue_id
group by event_type And venue_name;
-- +------------+------------+------------------+
-- | venue_name | event_type | avg_ticket_price |
-- +------------+------------+------------------+
-- | mumbai     | sports     | 2855.55555555556 |
-- +------------+------------+------------------+


-- Tasks 4: Subquery and its types
-- 1. Calculate the Average Ticket Price for Events in Each venue Using a Subquery.
select v.venue_name, 
	   AVG(e.ticket_price) AS average_ticket_price
from venue v 
JOIN event e ON v.id=e.venue_id
group by 
v.venue_name;
-- +--------------+----------------------+
-- | venue_name   | average_ticket_price |
-- +--------------+----------------------+
-- | bengaluru    |                 2500 |
-- | chennai      |                 2600 |
-- | mumbai       |                 4850 |
-- | pondicherry  |                  600 |
-- +--------------+----------------------+


-- 2)Find events with more than 50% of the tickets sold
/* total_tickets_sold=total_seats-available_seats
*/
select event_name,
		total_seats,
        available_seats 
from event
where (total_seats-available_seats) > (total_seats/2);
-- +------------------------------+-------------+-----------------+
-- | event_name                   | total_seats | available_seats |
-- +------------------------------+-------------+-----------------+
-- | CSK vs RCB                   |       23000 |               3 |
-- | CSK vs RR                    |       23000 |              10 |
-- | MI vs KKR                    |       28000 |             100 |
-- | vijai antony live-in concert |         420 |             170 |
-- | world cup inaguration        |       23000 |             300 |
-- | india vs england world cup   |       19000 |             500 |
-- | RR vs RCB                    |       20000 |             100 |
-- | comic con                    |        1000 |             200 |
-- +------------------------------+-------------+-----------------+


-- 3)Calculate the total nummber of tickets sold for each events
select event_name,
		(total_seats-available_seats) AS number_of_tickets_sold 
from event
group by 
	event_name
order by 
	number_of_tickets_sold;
-- +----------------------------------+------------------------+
-- | event_name                       | number_of_tickets_sold |
-- +----------------------------------+------------------------+
-- | Late Ms. Lata Mangeshkar Musical |                     50 |
-- | vijai antony live-in concert     |                    250 |
-- | comic con                        |                    800 |
-- | india vs england world cup       |                  18500 |
-- | RR vs RCB                        |                  19900 |
-- | world cup inaguration            |                  22700 |
-- | CSK vs RR                        |                  22990 |
-- | CSK vs RCB                       |                  22997 |
-- | MI vs KKR                        |                  27900 |
-- +----------------------------------+------------------------+


-- 4)Find Customer who have not booked any tickets using Not exist sub query
select *
from customer
where id not in (select distinct c.id 
					from customer c 
                    JOIN booking b ON c.id = b.customer_id );

-- 5)List events with no ticket sales using NOT IN
/*
no ticket sales=total_seats-available_seats >0
*/

select event_name, total_seats, available_seats 
from event 
where event_name NOT IN (
    select event_name 
    from event 
    where (total_seats - available_seats) > 0
);

-- 6)Calculate the number of tickes sold for each event type using subquery in the FROM
select event_type,
		sum(total_seats-available_seats) AS number_of_tickets_sold 
from event
group by event_type;
-- +------------+------------------------+
-- | event_type | number_of_tickets_sold |
-- +------------+------------------------+
-- | comic      |                    800 |
-- | concert    |                    300 |
-- | sports     |                 134987 |
-- +------------+------------------------+

-- Using Sub Query in FROM
select dt.event_type,
		sum(dt.total_seats-dt.available_seats) AS number_of_tickets_sold 
from(select * from event) as dt
group by dt.event_type;


-- 7)Calculate ticket prices higher than the average ticket price
select * from event
where ticket_price > (select AVG (ticket_price) from event);
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- | id | event_name                 | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
-- |  2 | CSK vs RCB                 | 2024-04-11 | 19:30      |       23000 |               3 |         3600 | sports     |        2 |
-- |  3 | CSK vs RR                  | 2024-04-19 | 19:30      |       23000 |              10 |         3400 | sports     |        2 |
-- |  4 | MI vs KKR                  | 2024-05-01 | 15:30      |       28000 |             100 |         8000 | sports     |        1 |
-- |  7 | india vs england world cup | 2027-07-19 | 19:30      |       19000 |             500 |         3000 | sports     |        5 |
-- +----+----------------------------+------------+------------+-------------+-----------------+--------------+------------+----------+



-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
-- projection: customer
-- criteria: booking
select sum(b.total_cost)
from customer c JOIN booking b ON c.id = b.customer_id
group by c.customer_name;
-- +-------------------+
-- | sum(b.total_cost) |
-- +-------------------+
-- |              1920 |
-- |             34000 |
-- |             12080 |
-- |             18000 |
-- |             32000 |
-- +-------------------+



-- 9. List customers Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
-- projection: customers
-- criteria: venue
select *
from customer
where id in (select customer_id
					from booking
                    where event_id in (select id
										from event
                                        where venue_id in (select id
															from venue
                                                            where venue_name = 'mumbai')));

-- +----+----------------+---------------+--------------+
-- | id | customer_name  | email         | phone_number |
-- +----+----------------+---------------+--------------+
-- |  2 | ronald weasley | ron@gmail.com | 45454545     |
-- +----+----------------+---------------+--------------+

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with Group by
-- projection: event
-- criteria: event
select sum(total_seats-available_seats)
from event e
group by event_type;
-- +----------------------------------+
-- | sum(total_seats-available_seats) |
-- +----------------------------------+
-- |                              800 |
-- |                              300 |
-- |                           134987 |
-- +----------------------------------+
